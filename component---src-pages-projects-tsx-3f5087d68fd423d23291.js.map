{"version":3,"file":"component---src-pages-projects-tsx-3f5087d68fd423d23291.js","mappings":"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","sources":["webpack://sergii-dev/./src/components/left-pane/projects-list.tsx","webpack://sergii-dev/./src/components/project-list-item.tsx","webpack://sergii-dev/./src/pages/projects.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from \"react\";\nimport slugify from \"slugify\";\nimport styled from \"@emotion/styled\";\n\nimport LeftPaneContainer from \"./left-pane-container\";\nimport { graphql, Link, useStaticQuery } from \"gatsby\";\nimport { isRouteActive } from \"@core/routing\";\n\nconst ProjectsList: FC<{ location: Location }> = props => {\n  const { edges } = useGitHubProjectsListQuery();\n  const [offsetTop, setOffsetTop] = useState(0);\n  const activeLi = React.useRef<HTMLLIElement>(null);\n\n  useEffect(() => {\n    setOffsetTop(activeLi?.current?.offsetTop || 0);\n  }, [activeLi]);\n\n  return (\n    <LeftPaneContainer title=\"Projects\" offsetTop={offsetTop}>\n      <Projects>\n        {edges.map(e => {\n          return e.node.data?.repositoryOwner?.repositories?.edges!.map(\n            item => {\n              const slug = `/projects/${slugify(\n                item?.node?.name!\n              ).toLocaleLowerCase()}`;\n\n              const isActive = isRouteActive(slug, props.location);\n\n              return (\n                <li key={slug} ref={isActive ? activeLi : null}>\n                  <Link\n                    to={slug}\n                    className={isActive ? \"active\" : undefined}\n                    title={item?.node?.name!}\n                  >\n                    <strong>{item?.node?.name}</strong>\n                    <p>{item?.node?.description}</p>\n                  </Link>\n                </li>\n              );\n            }\n          );\n        })}\n      </Projects>\n    </LeftPaneContainer>\n  );\n};\n\nconst useGitHubProjectsListQuery = () => {\n  const { allGithubData } =\n    useStaticQuery<GatsbyTypes.GitHubProjectsListQuery>(graphql`\n      query GitHubProjectsList {\n        allGithubData {\n          edges {\n            node {\n              data {\n                repositoryOwner {\n                  repositories {\n                    edges {\n                      node {\n                        name\n                        description\n                        createdAt\n                        object {\n                          text\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `);\n\n  return allGithubData;\n};\n\nconst Projects = styled.ul(props => ({\n  \"& > li > a\": {\n    display: \"flex\",\n    flexDirection: \"column\",\n    color: props.theme.colors.leftPane.textColor,\n    paddingTop: 6,\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    border: \"solid 1px transparent\",\n  },\n  \"& > li > a:hover\": {\n    backgroundColor: props.theme.colors.leftPane.backgroundColorHover,\n    border: props.theme.colors.borderHover,\n    color: props.theme.colors.leftPane.textColorHover,\n    textDecoration: \"none\",\n    cursor: \"pointer\",\n  },\n\n  \"& > li > a.active\": {\n    backgroundColor: props.theme.colors.leftPane.backgroundColorActive,\n    border: props.theme.colors.borderActive,\n    color: props.theme.colors.leftPane.textColorActive,\n  },\n\n  \"& > li > a strong\": {\n    fontWeight: \"bold\",\n  },\n\n  \"& > li > a span\": {\n    marginLeft: 16,\n    fontSize: 11,\n    opacity: 0.85,\n  },\n\n  \"& > li > a > p\": {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n}));\n\nexport default ProjectsList;\n","import React, { FC, CSSProperties } from \"react\";\nimport styled from \"@emotion/styled\";\n\nimport { Link } from \"gatsby\";\n\nconst ProjectListItem: FC<{\n  name: string;\n  title: string;\n  description: string;\n  date: string;\n  style?: CSSProperties;\n}> = props => {\n  return (\n    <div style={{ ...props.style, padding: \"6px 18px\" }}>\n      <ArticleItemContainer key={props.name}>\n        <Link to={props.name}>\n          <ArticleItemHeader>\n            <h3>{props.title}</h3>\n          </ArticleItemHeader>\n          <ArticleItemBody>{props.description}</ArticleItemBody>\n        </Link>\n      </ArticleItemContainer>\n    </div>\n  );\n};\n\nconst ArticleItemContainer = styled.div(props => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  margin: \"9px 0\",\n  padding: \"12px\",\n  backgroundColor: props.theme.colors.main.titleContainerBackgroundColor,\n\n  \":hover\": {\n    backgroundColor: props.theme.colors.main.backgroundHoverColor,\n  },\n}));\n\nconst ArticleItemHeader = styled.div(props => ({\n  display: \"flex\",\n\n  \"& h3\": {\n    margin: 0,\n    color: props.theme.colors.textColor,\n    opacity: 0.85,\n  },\n\n  \"& h3:hover\": {\n    opacity: 1,\n  },\n}));\n\nconst ArticleItemBody = styled.div(props => ({\n  display: \"flex\",\n  margin: \"12px 0\",\n  color: props.theme.colors.textColor,\n}));\n\nexport default ProjectListItem;\n","import React, { FC, useState } from \"react\";\nimport { graphql, HeadFC } from \"gatsby\";\n\nimport { FixedSizeList as List, ListChildComponentProps } from \"react-window\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\n\nimport ProjectsList from \"@components/left-pane/projects-list\";\nimport ContentContainer from \"@components/content\";\nimport ProjectListItem from \"@components/project-list-item\";\nimport SEO from \"@components/seo\";\n\nconst Row = ({\n  data,\n  index,\n  style,\n}: ListChildComponentProps<{ location: Location; edges: any }>) => {\n  const { createdAt, name, description } = data.edges[index].node;\n\n  return (\n    <ProjectListItem\n      date={createdAt.toLocaleLowerCase()}\n      name={name!}\n      title={name!}\n      key={name!}\n      description={description!}\n      style={style}\n    />\n  );\n};\n\nconst ProjectsPage: FC<{\n  data: GatsbyTypes.GitHubProjectsListPageDataQuery;\n  location: Location;\n}> = props => {\n  const { edges } =\n    props.data.allGithubData.edges[0]?.node.data?.repositoryOwner!\n      .repositories!;\n  const [shouldDisplayShadow, setShouldDisplayShadow] =\n    useState<boolean>(false);\n\n  return (\n    <ContentContainer title=\"Projects\" displayShadow={shouldDisplayShadow}>\n      <AutoSizer>\n        {({ height, width }) => (\n          <List\n            height={height}\n            itemCount={edges!.length}\n            itemData={{ location: props.location, edges }}\n            itemSize={126}\n            width={width}\n            onScroll={e => setShouldDisplayShadow(e.scrollOffset > 0)}\n          >\n            {Row}\n          </List>\n        )}\n      </AutoSizer>\n    </ContentContainer>\n  );\n};\n\nexport const query = graphql`\n  query GitHubProjectsListPageData {\n    site {\n      siteMetadata {\n        title\n        author\n        description\n        keywords\n      }\n    }\n    allGithubData {\n      edges {\n        node {\n          data {\n            repositoryOwner {\n              repositories {\n                edges {\n                  node {\n                    name\n                    description\n                    createdAt\n                    object {\n                      text\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n(ProjectsPage as any).Aside = ProjectsList;\n\nexport default ProjectsPage;\n\nexport const Head: HeadFC<\n  GatsbyTypes.GitHubProjectsListPageDataQuery\n> = props => {\n  const siteMetadata = props.data.site?.siteMetadata!;\n  return (\n    <SEO\n      title={`Projects | ${siteMetadata.title}` || \"\"}\n      author={siteMetadata.author || \"\"}\n      keywords={siteMetadata.keywords || \"\"}\n      description={`Projects | ${siteMetadata.title}` || \"\"}\n    />\n  );\n};\n"],"names":["useGitHubProjectsListQuery","allGithubData","useStaticQuery","Projects","_styled","target","props","display","flexDirection","color","theme","colors","leftPane","textColor","paddingTop","paddingBottom","paddingLeft","paddingRight","border","backgroundColor","backgroundColorHover","borderHover","textColorHover","textDecoration","cursor","backgroundColorActive","borderActive","textColorActive","fontWeight","marginLeft","fontSize","opacity","justifyContent","edges","offsetTop","setOffsetTop","useState","activeLi","React","useEffect","_activeLi$current","current","___EmotionJSX","LeftPaneContainer","title","map","e","_e$node$data","_e$node$data$reposito","_e$node$data$reposito2","node","data","repositoryOwner","repositories","item","_item$node","_item$node2","_item$node3","_item$node4","slug","slugify","name","toLocaleLowerCase","isActive","isRouteActive","location","key","ref","Link","to","className","undefined","description","ArticleItemContainer","margin","padding","main","titleContainerBackgroundColor","backgroundHoverColor","ArticleItemHeader","ArticleItemBody","style","Row","_ref","index","createdAt","ProjectListItem","date","ProjectsPage","_props$data$allGithub","_props$data$allGithub2","shouldDisplayShadow","setShouldDisplayShadow","ContentContainer","displayShadow","AutoSizer","_ref2","height","width","List","itemCount","length","itemData","itemSize","onScroll","scrollOffset","Aside","ProjectsList","Head","_props$data$site","siteMetadata","site","SEO","author","keywords"],"sourceRoot":""}