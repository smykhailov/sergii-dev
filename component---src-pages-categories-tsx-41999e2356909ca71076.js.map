{"version":3,"file":"component---src-pages-categories-tsx-41999e2356909ca71076.js","mappings":"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","sources":["webpack://sergii-dev/./src/components/left-pane/categories-list.tsx","webpack://sergii-dev/./src/pages/categories.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from \"react\";\nimport { graphql, Link, useStaticQuery } from \"gatsby\";\nimport slugify from \"slugify\";\nimport styled from \"@emotion/styled\";\n\nimport LeftPaneContainer from \"./left-pane-container\";\nimport { isRouteActive } from \"@core/routing\";\n\nconst CategoriesList: FC<{ location: Location }> = props => {\n  const { distinct: categories, group } = useCategoriesListQuery();\n  const [offsetTop, setOffsetTop] = useState(0);\n  const activeLi = React.useRef<HTMLLIElement>(null);\n\n  useEffect(() => {\n    setOffsetTop(activeLi?.current?.offsetTop || 0);\n  }, [activeLi]);\n\n  return (\n    <LeftPaneContainer title=\"Categories\" offsetTop={offsetTop}>\n      <Categories>\n        {categories.map((category, idx) => {\n          const slug = `/categories/${slugify(category).toLocaleLowerCase()}`;\n          const articlesCount = group[idx]?.totalCount || 0;\n          let amountOfArticles = \"There are no articles in this category yet\";\n\n          if (articlesCount > 0) {\n            if (articlesCount === 1) {\n              amountOfArticles = \"1 article\";\n            } else {\n              amountOfArticles = `${articlesCount} articles`;\n            }\n          }\n\n          const isActive = isRouteActive(slug, props.location);\n\n          return (\n            <li key={slug} ref={isActive ? activeLi : null}>\n              <Link\n                to={slug}\n                className={isActive ? \"active\" : undefined}\n                title={category}\n              >\n                <p>\n                  <strong>{category}</strong>\n                </p>\n                <p>{amountOfArticles}</p>\n              </Link>\n            </li>\n          );\n        })}\n      </Categories>\n    </LeftPaneContainer>\n  );\n};\n\nconst useCategoriesListQuery = () => {\n  const { allMdx } = useStaticQuery<GatsbyTypes.CategoriesListQuery>(graphql`\n    query CategoriesList {\n      allMdx(\n        sort: { frontmatter: { categories: ASC } }\n        filter: { frontmatter: { published: { eq: true } } }\n      ) {\n        distinct(field: { frontmatter: { categories: SELECT } })\n        group(field: { frontmatter: { categories: SELECT } }) {\n          totalCount\n        }\n      }\n    }\n  `);\n\n  return allMdx;\n};\n\nconst Categories = styled.ul(props => ({\n  \"& > li > a\": {\n    display: \"flex\",\n    flexDirection: \"column\",\n    color: props.theme.colors.leftPane.textColor,\n    paddingTop: 6,\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    border: \"solid 1px transparent\",\n  },\n  \"& > li > a:hover\": {\n    backgroundColor: props.theme.colors.leftPane.backgroundColorHover,\n    border: props.theme.colors.borderHover,\n    color: props.theme.colors.leftPane.textColorHover,\n    textDecoration: \"none\",\n    cursor: \"pointer\",\n  },\n\n  \"& > li > a.active\": {\n    backgroundColor: props.theme.colors.leftPane.backgroundColorActive,\n    border: props.theme.colors.borderActive,\n    color: props.theme.colors.leftPane.textColorActive,\n  },\n\n  \"& > li > a strong\": {\n    fontWeight: \"bold\",\n  },\n\n  \"& > li > a span\": {\n    marginLeft: 16,\n    fontSize: 11,\n    opacity: 0.85,\n  },\n\n  \"& > li > a > p\": {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n}));\n\nexport default CategoriesList;\n","import React, { FC, useState } from \"react\";\nimport { graphql, HeadFC, Link } from \"gatsby\";\nimport styled from \"@emotion/styled\";\n\nimport CategoriesList from \"@components/left-pane/categories-list\";\nimport ContentContainer from \"@components/content\";\nimport ArticleListItem from \"@components/article-list-item\";\nimport slugify from \"slugify\";\nimport SEO from \"@components/seo\";\n\nconst CategoriesPage: FC<{\n  data: GatsbyTypes.CategoriesPageDataQuery;\n  location: Location;\n}> = props => {\n  const [shouldDisplayShadow, setShouldDisplayShadow] =\n    useState<boolean>(false);\n\n  return (\n    <ContentContainer title=\"Categories\" displayShadow={shouldDisplayShadow}>\n      <CategoryWrapper\n        onScroll={e =>\n          setShouldDisplayShadow((e.target as HTMLElement).scrollTop > 0)\n        }\n      >\n        {props.data.allMdx.group.map(group => {\n          return (\n            <React.Fragment key={group.fieldValue}>\n              <CategoryGroup>\n                <h2>{group.fieldValue!}</h2>\n                <Link\n                  to={`/categories/${slugify(\n                    group.fieldValue!\n                  ).toLocaleLowerCase()}`}\n                >\n                  All articles in the category\n                </Link>\n              </CategoryGroup>\n              {group.nodes.slice(0, 3).map(node => (\n                <ArticleListItem\n                  id={node.id}\n                  key={node.id}\n                  slug={node.fields?.slug!}\n                  title={node.frontmatter?.title!}\n                  date={node.frontmatter?.date!}\n                  timeToRead={node.fields?.readingTime?.text!}\n                  tags={node.frontmatter?.tags}\n                />\n              ))}\n            </React.Fragment>\n          );\n        })}\n      </CategoryWrapper>\n    </ContentContainer>\n  );\n};\n\nexport const query = graphql`\n  query CategoriesPageData {\n    site {\n      siteMetadata {\n        title\n        author\n        description\n        keywords\n      }\n    }\n    allMdx(\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { published: { eq: true } } }\n    ) {\n      group(field: { frontmatter: { categories: SELECT } }) {\n        fieldValue\n        nodes {\n          id\n          fields {\n            slug\n            readingTime {\n              text\n              minutes\n              time\n            }\n          }\n          frontmatter {\n            date\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst CategoryWrapper = styled.div({\n  maxHeight: \"calc(100vh - 61px)\",\n  overflow: \"auto\",\n  marginTop: 18,\n});\n\nconst CategoryGroup = styled.div(props => ({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  marginTop: 18,\n  marginBottom: 6,\n  margin: \"0 18px 0 0\",\n\n  \"& h2\": {\n    margin: \"0 0 0 18px\",\n  },\n\n  \"& a\": {\n    color: props.theme.colors.linkColor,\n    opacity: 0.85,\n  },\n\n  \"& a:hover\": {\n    opacity: 1,\n  },\n}));\n\n(CategoriesPage as any).Aside = CategoriesList;\n\nexport default CategoriesPage;\n\nexport const Head: HeadFC<GatsbyTypes.CategoriesPageDataQuery> = props => {\n  const siteMetadata = props.data.site?.siteMetadata!;\n  return (\n    <SEO\n      title={`Categories | ${siteMetadata.title}` || \"\"}\n      author={siteMetadata.author || \"\"}\n      keywords={props.data.allMdx.group\n        .map(group => group.fieldValue!)\n        .join(\", \")}\n      description={`Categories | ${siteMetadata.title}` || \"\"}\n    />\n  );\n};\n"],"names":["useCategoriesListQuery","allMdx","useStaticQuery","Categories","_styled","target","props","display","flexDirection","color","theme","colors","leftPane","textColor","paddingTop","paddingBottom","paddingLeft","paddingRight","border","backgroundColor","backgroundColorHover","borderHover","textColorHover","textDecoration","cursor","backgroundColorActive","borderActive","textColorActive","fontWeight","marginLeft","fontSize","opacity","justifyContent","distinct","categories","group","offsetTop","setOffsetTop","useState","activeLi","React","useEffect","_activeLi$current","current","___EmotionJSX","LeftPaneContainer","title","map","category","idx","_group$idx","slug","slugify","toLocaleLowerCase","articlesCount","totalCount","amountOfArticles","isActive","isRouteActive","location","key","ref","Link","to","className","undefined","CategoriesPage","shouldDisplayShadow","setShouldDisplayShadow","ContentContainer","displayShadow","CategoryWrapper","onScroll","e","scrollTop","data","fieldValue","CategoryGroup","nodes","slice","node","_node$fields","_node$frontmatter","_node$frontmatter2","_node$fields2","_node$fields2$reading","_node$frontmatter3","ArticleListItem","id","fields","frontmatter","date","timeToRead","readingTime","text","tags","name","styles","marginTop","marginBottom","margin","linkColor","Aside","CategoriesList","Head","_props$data$site","siteMetadata","site","SEO","author","keywords","join","description"],"sourceRoot":""}