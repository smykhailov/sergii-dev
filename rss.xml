<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[Sergii Mykhailov's Blog]]></title><description><![CDATA[sergii.dev, is a personal blog maintained by Sergii Mykhailov. The blog features articles on various topics such as software engineering, programming languages, and cloud computing.]]></description><link>https://sergii.dev</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 22 Apr 2024 18:03:39 GMT</lastBuildDate><item><title><![CDATA[How to start developer's career]]></title><description><![CDATA[I got a lot of questions about how to start a developer's career. I decided to write a post about it. I hope it will be useful for you. Let's start. Learn the basics of programming

The first step is to learn the basics of programming. You can start with any programming language. I recommend to go with JavaScript and Web development. Why? Because it's easy to start and you can learn a lot of things. In addition, you need no tools to start. Only browser's developer tools needed to learn the basics and start experimenting.

Learn language statements, operations, basic algorithms and data structures. That helps to build foundation for the future career. Also learn about compilers, interpreters, and other transpilers. It's important to understand how the code is executed.

Learn the basics of JavaScript and Web development

Start with basics of the web. It's a great resource to learn the basics of the web. After that, you can start learning the basics of JavaScript. And proceed with HTML and…]]></description><link>https://sergii.dev/articles/how-to-start-dev-career/</link><guid isPermaLink="false">https://sergii.dev/articles/how-to-start-dev-career/</guid><category><![CDATA[Development]]></category><category><![CDATA[Fundamentals]]></category><pubDate>Mon, 27 Feb 2023 20:29:47 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/0d6ede7d0b9700041d967a95cbfb8874/3f4ea/cover.jpg"/><featuredImage>https://sergii.dev/static/0d6ede7d0b9700041d967a95cbfb8874/3f4ea/cover.jpg</featuredImage></item><item><title><![CDATA[Understand the basics]]></title><description><![CDATA[As I said in my previous post, I am going to start a series of posts about JavaScript. I will explain the basics of the language and how to use it in the browser. I will also explain the basics of the browser and how to use the developer tools. Getting started

JavaScript is a programming language that is used to make web pages interactive. It is the most popular programming language for web development, but not the only. JavaScript basics are easy to learn, but you will need to practice to become a good JavaScript developer. As I mentioned, to start learning JavaScript, no need to install any tools. You can start with just the browser. To be more effective developer, you'll definitely use some tools and later I'll tell about them. But to start experimenting - browser will be enough. Also, you need need to know the basics of HTML and a little of CSS.

I think the best way to learn any new thing is to do it. So, let's start with a simple example. Open your browser (I prefer Microsoft…]]></description><link>https://sergii.dev/articles/understand-the-basics/</link><guid isPermaLink="false">https://sergii.dev/articles/understand-the-basics/</guid><category><![CDATA[Development]]></category><category><![CDATA[Fundamentals]]></category><pubDate>Mon, 13 Mar 2023 18:16:29 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/466a878c52570ce47fcead7ff9393291/3f4ea/cover.jpg"/><featuredImage>https://sergii.dev/static/466a878c52570ce47fcead7ff9393291/3f4ea/cover.jpg</featuredImage></item><item><title><![CDATA[Software Analytics]]></title><description><![CDATA[I was always inspired by the idea to make developers' more efficient and achieve better code quality to maintain code sanity. I worked with few tools which helped me to achieve some level of it, among them are: SonarQube StyleCop FxCop ESLint JSHint

But recently my friend and colleague Roman Dvornov explained me that code sanity and developer's efficiency is just a subset of much broader discipline, which named Software Analytics. I was surprised that I never heard about it before, but after some research I found out that it is a very interesting and promising field of software development.

What is Software Analytics?

Software Analytics is a relatively young discipline that leverages data-driven techniques to enhance developers' experience, optimize codebase and infrastructure. By analyzing code, repositories, and performance metrics, it provides actionable insights to streamline development processes, pinpoint inefficiencies, and improve overall code quality. This data-centric…]]></description><link>https://sergii.dev/articles/software-analytics/</link><guid isPermaLink="false">https://sergii.dev/articles/software-analytics/</guid><category><![CDATA[Engineering]]></category><pubDate>Wed, 22 Mar 2023 16:28:32 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/d477e87bd1ba52604cea5ecd117d6c3c/3f4ea/cover.jpg"/><featuredImage>https://sergii.dev/static/d477e87bd1ba52604cea5ecd117d6c3c/3f4ea/cover.jpg</featuredImage></item><item><title><![CDATA[Enterprise vs Open-Source]]></title><description><![CDATA[Being a long time enterprise developer I have a lot of experience in building maintainable and scalable systems. The main focus os my work for long time was on backend and infrastructure. And some time ago I started to work with open-source too. I quickly learned that they are two very different worlds: enterprise and open-source software (OSS). And because of their different nature, rules applied in one don't necessary work in another. This is because they differentiate in core scenarios:

Enterprise has stricter requirements on security, data retention, compliance, privacy, etc. Often it also has a longer maintenance period. OSS world adopts faster changes, better flexibility (more ways to do the same thing), simplicity, etc.

The core scenarios of OSS are nice to have in enterprise as well, but they are not enough. Compliance, reliability, privacy, security and scale are key in that domain.

Based on the different nature of the problems solved by these two different worlds, the…]]></description><link>https://sergii.dev/articles/enterprise-vs-open-source/</link><guid isPermaLink="false">https://sergii.dev/articles/enterprise-vs-open-source/</guid><category><![CDATA[Engineering]]></category><pubDate>Mon, 03 Apr 2023 18:27:25 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/29da35f483f211ba45e49ea7f9ea5c51/8dc98/cover.jpg"/><featuredImage>https://sergii.dev/static/29da35f483f211ba45e49ea7f9ea5c51/8dc98/cover.jpg</featuredImage></item><item><title><![CDATA[Configure Windows Terminal]]></title><description><![CDATA[How to Install and Configure Windows Terminal Windows Terminal is a modern and customizable terminal application that allows you to run multiple command-line tools and shells in the same window. You can use Windows Terminal to run PowerShell, Command Prompt, WSL, SSH, Azure CLI, and more. In this article, I will show you how to install and configure Windows Terminal on your Windows machine.

Install Windows Terminal from Microsoft Store

The easiest way to install Windows Terminal is to use the Microsoft Store app on your PC. To do this, follow these steps:

Open the Microsoft Store app from the Start menu or by searching for it in the search box. In the search box, type "Windows Terminal" and press Enter. Click on the Windows Terminal app from the search results and then click on the Get button to install it. Wait for the installation to complete and then click on the Launch button to open Windows Terminal.
Customize Windows Terminal Settings

Windows Terminal allows you to customize…]]></description><link>https://sergii.dev/articles/configure-windows-terminal/</link><guid isPermaLink="false">https://sergii.dev/articles/configure-windows-terminal/</guid><category><![CDATA[Tooling]]></category><pubDate>Sat, 15 Apr 2023 15:30:32 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/97a5174bd02b0aa1ba10cee98f19816e/f4c56/cover.jpg"/><featuredImage>https://sergii.dev/static/97a5174bd02b0aa1ba10cee98f19816e/f4c56/cover.jpg</featuredImage></item><item><title><![CDATA[Install PowerShell Core and Oh My Posh]]></title><description><![CDATA[To make Windows Terminal even more effective, I recommend to install and configure PowerShell Core and Oh My Posh. In this blog post, I will show you how to install and configure them. PowerShell Core

PowerShell Core is a cross-platform version of PowerShell that runs on Windows, Linux and macOS. It is based on .NET Core, a lightweight and modular framework that can be installed on different operating systems. PowerShell Core is compatible with most of the existing PowerShell modules and cmdlets, but also introduces new features and enhancements.

In this blog post, I will explore some of the benefits of using PowerShell Core for scripting and automation tasks. Here are some of the advantages of PowerShell Core over the traditional Windows PowerShell:

Cross-platform support: you can use PowerShell Core to manage different types of systems and devices, such as Linux servers, IoT devices, cloud services and more. You can also write scripts that can run on multiple platforms without much…]]></description><link>https://sergii.dev/articles/pscore-ohmyposh/</link><guid isPermaLink="false">https://sergii.dev/articles/pscore-ohmyposh/</guid><category><![CDATA[Tooling]]></category><pubDate>Mon, 24 Apr 2023 17:34:37 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/38d7c8a79c59ac539561f1e16bf9b00e/3b307/cover.jpg"/><featuredImage>https://sergii.dev/static/38d7c8a79c59ac539561f1e16bf9b00e/3b307/cover.jpg</featuredImage></item><item><title><![CDATA[Web Developer's Tools]]></title><description><![CDATA[Developing JavaScript applications with just a browser sounds tempting, but it's not enough. You need some tools to boost your productivity and simplify your workflow. In this article, I will introduce the tools that you might find indispensable in your daily work. After setting up Windows Terminal and PowerShell, you are ready to install other tools that will enhance your experience.

Node.js

The first tool in your tool-belt should be Node.js. It is a popular and powerful JavaScript runtime environment that allows you to run JavaScript code outside of a web browser. In this section, I will give you an overview of what Node.js is, how it works, and why you should use it for your next web development project.

Node.js is an open-source, cross-platform software that executes JavaScript code on a server. It was created in 2009 by Ryan Dahl, who was inspired by the event-driven and non-blocking I/O model of Google Chrome's V8 engine (in one of the future posts, I'll explain what V8 engine…]]></description><link>https://sergii.dev/articles/web-dev-tools/</link><guid isPermaLink="false">https://sergii.dev/articles/web-dev-tools/</guid><category><![CDATA[Tooling]]></category><pubDate>Fri, 26 May 2023 18:03:48 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/e262372c94efc1374151a9063928895b/35886/cover.jpg"/><featuredImage>https://sergii.dev/static/e262372c94efc1374151a9063928895b/35886/cover.jpg</featuredImage></item><item><title><![CDATA[HTML - The minimum required knowledge]]></title><description><![CDATA[After dev environment setup, the first thing you need to learn is HTML. HTML is the language that is used to create the skeleton of a web page. It is the first thing that you need to learn to start your web development journey. HTML Overview

HTML stands for HyperText Markup Language. It is the standard language for creating web pages and web applications. HTML describes the structure and content of a web page using tags and attributes. Tags are keywords enclosed in angle brackets (< and >) that define how the content should be displayed. Attributes are additional information that modify the behavior or appearance of a tag.

For example, the following HTML code defines a web page with a title, a heading and a paragraph:

The result of the above code will look the following way:

The <html> tag indicates the start and end of the HTML document. The <head> tag contains information about the web page, such as the <title> tag that defines the title of the web page. The <body> tag contains…]]></description><link>https://sergii.dev/articles/html-minimum-required-knowledge/</link><guid isPermaLink="false">https://sergii.dev/articles/html-minimum-required-knowledge/</guid><category><![CDATA[Fundamentals]]></category><category><![CDATA[Development]]></category><pubDate>Tue, 06 Jun 2023 18:23:25 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/fc752b6edbf03512039c52783222c337/6e5bc/cover.jpg"/><featuredImage>https://sergii.dev/static/fc752b6edbf03512039c52783222c337/6e5bc/cover.jpg</featuredImage></item><item><title><![CDATA[CSS - The minimum required knowledge]]></title><description><![CDATA[The natural continuation in learning web technologies goes with CSS. HTML instructs browser what and where to display, but CSS is responsible for the look and feel of the web page. It is the language that describes the style of an HTML document. CSS describes how HTML elements should be displayed. This article will cover the minimum required knowledge to start working with CSS. CSS Overview

CSS stands for Cascading Style Sheets. It is a language that defines how HTML elements are displayed on a web page. CSS can control the layout, colors, fonts, animations, transitions, and other aspects of the presentation layer of a web page.

CSS works by applying rules to HTML elements that match certain selectors. A selector can be an element name, a class name, an id, an attribute, or a combination of these. A rule consists of a selector and a declaration block. A declaration block contains one or more declarations that specify the properties and values for the selected elements.

For example…]]></description><link>https://sergii.dev/articles/css-minimum-required-knowledge/</link><guid isPermaLink="false">https://sergii.dev/articles/css-minimum-required-knowledge/</guid><category><![CDATA[Fundamentals]]></category><category><![CDATA[Development]]></category><pubDate>Fri, 16 Jun 2023 16:42:36 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/e85eca24dc697909aa744c4f06210e09/3f4ea/cover.jpg"/><featuredImage>https://sergii.dev/static/e85eca24dc697909aa744c4f06210e09/3f4ea/cover.jpg</featuredImage></item><item><title><![CDATA[Git and GitHub - The minimum required knowledge]]></title><description><![CDATA[It is a good idea to store your work on a remote server. This way you can access it from anywhere and you have a backup in case your computer crashes. In this article I will explain the minimum required knowledge to get started with Git and GitHub. Git

Git is a powerful and popular tool for managing software projects. It allows developers to collaborate on code, track changes, and create multiple versions of their work. In this blog post, we will give you an overview of some of the most fundamental concepts and commands of Git. Git is a distributed version control system, which means that every developer has a full copy of the project history on their local machine. This makes it easy to work offline, switch between branches, and merge changes with other developers. Git also has a remote repository, which is a central place where developers can store and share their code.

Git works by creating snapshots of your files every time you make a commit, which is a record of the changes you…]]></description><link>https://sergii.dev/articles/git-and-github-minimum-required-knowledge/</link><guid isPermaLink="false">https://sergii.dev/articles/git-and-github-minimum-required-knowledge/</guid><category><![CDATA[Fundamentals]]></category><category><![CDATA[Tooling]]></category><pubDate>Tue, 04 Jul 2023 15:45:04 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/666bbb31bfb5ddae1e58c13bd9f01a39/3b307/cover.jpg"/><featuredImage>https://sergii.dev/static/666bbb31bfb5ddae1e58c13bd9f01a39/3b307/cover.jpg</featuredImage></item><item><title><![CDATA[The Businessman (Commersant) project]]></title><description><![CDATA[The best way to learn a new technology or programming language is to create something with it. I thought for a long time which project I can propose to start with. And I decided not to invent something new, but rather return back to my teenage years and create a game. I have chosen a game that I played a lot in my childhood. It is called "Businessman" (Коммерсантъ). The goal of the game is to become the richest player by buying and selling properties. The game is over when one player becomes bankrupt. The game is very simple and I think it is a good start for a beginner. That was my first project, I learned two programming languages by implementing this game with them. First language was Pascal and the next one, was logical continuation of it - Delphi. Unfortunately, I lost the Pascal version of the code, but I still have Delphi version, both executable and source code. I created it when I was 18 and didn't know English well, so the filenames and classes are partially named as…]]></description><link>https://sergii.dev/articles/the-businessman-commersant-project/</link><guid isPermaLink="false">https://sergii.dev/articles/the-businessman-commersant-project/</guid><category><![CDATA[Businessman]]></category><pubDate>Mon, 10 Jul 2023 18:15:36 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/e6bd415d2fd096829dd466a1df98855c/0db10/cover.jpg"/><featuredImage>https://sergii.dev/static/e6bd415d2fd096829dd466a1df98855c/0db10/cover.jpg</featuredImage></item><item><title><![CDATA[The Businessman - Initial commit]]></title><description><![CDATA[So, it is time to start the real codding work. As I proposed on the previous post, we are going to implement a game - The Businessman. The project will be implemented in vanilla technologies - HTML, CSS and JavaScript. No framework, no bundlers, no transpilers. Just plain old technologies. This will help to understand basics and prepare platform and gain necessary knowledge for future transition to most advanced technologies, frameworks and abstractions. This approach will also help to understand why and how different technologies and framework appeared and what problems they were solving and how they simplify (or sometimes complicates 😄) different aspects of web development. Create repository

First of all you need to register your account on GitHub if you donn't have it yet. Then you need to create a new repository. You can do it by clicking on the + button in the top right corner of the page and selecting New repository from the dropdown menu.

I'll do the same to show the entire…]]></description><link>https://sergii.dev/articles/the-businessman-initial-commit/</link><guid isPermaLink="false">https://sergii.dev/articles/the-businessman-initial-commit/</guid><category><![CDATA[Businessman]]></category><pubDate>Mon, 17 Jul 2023 18:30:05 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/41a4de58fc859031a59afb47ccb5589b/3f4ea/cover.jpg"/><featuredImage>https://sergii.dev/static/41a4de58fc859031a59afb47ccb5589b/3f4ea/cover.jpg</featuredImage></item><item><title><![CDATA[Publish to GitHub pages]]></title><description><![CDATA[In this blog post, I will show you how to deploy your site to GitHub Pages from the branch. GitHub Pages is a service that lets you host your static website for free using GitHub. You can use any branch in your repository as the source for your site, which gives you more flexibility and control over your deployment process.

As I don't use any framework, I don't need to create a special branch for GitHub Pages. I can use the master branch as the source for this project. For this project it is enough to use GitHub Settings to publish the site.

Just select the master branch and click on the Save button. It is as easy as that. You will see a message that says "Your site is ready to be published at https://username.github.io/reponame/" where username is your GitHub username and reponame is your repository name.

In my case it is located on The Businssman repository page. For now, it is empty, but it will be updated as soon as I push the changes to the master branch. But as I referenced…]]></description><link>https://sergii.dev/articles/publish-to-github-pages/</link><guid isPermaLink="false">https://sergii.dev/articles/publish-to-github-pages/</guid><category><![CDATA[Businessman]]></category><pubDate>Mon, 28 Aug 2023 17:08:00 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/c3275d7770d4ec6ffb873299632f94a8/532e9/cover.jpg"/><featuredImage>https://sergii.dev/static/c3275d7770d4ec6ffb873299632f94a8/532e9/cover.jpg</featuredImage></item><item><title><![CDATA[The Businessman - The Main Screen]]></title><description><![CDATA[After we configured project publishing, we can start working on the main screen. The main screen is the first screen that the player sees when starts the game. The main screen will replicate the MS DOS version of the game, but using HTML and CSS. The final result will look like it is shown on the cover picture of this article. We are going to use Flexbox to position the elements on the screen. There is a great Flexbox guide on CSS-Tricks that you can use as a reference. There is no reason for me to repeat the information already available and well explained. BTW, this is my general advice, just go and read additional information, by following the links I provide or use search engines or StackOverflow to get more information. ChatGPT is also good source of information, but it is not always very accurate and you need to validate answers by yourself, if something doesn't work.

The Main Screen

Usually each web site or even web page has a header, a footer and a main content. And our game…]]></description><link>https://sergii.dev/articles/the-businessman-main-screen/</link><guid isPermaLink="false">https://sergii.dev/articles/the-businessman-main-screen/</guid><category><![CDATA[Businessman]]></category><pubDate>Mon, 04 Sep 2023 17:18:29 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/817e914cc2254938bac513ceb114619a/046b7/cover.jpg"/><featuredImage>https://sergii.dev/static/817e914cc2254938bac513ceb114619a/046b7/cover.jpg</featuredImage></item><item><title><![CDATA[The Businessman - Basic Interactivity]]></title><description><![CDATA[After we have created the basic structure of the game, we can start adding some interactivity to it. We will start with the most basic one, which is the main game loop. Our requirement is to have a game loop that will run every two seconds and will update the game state. JavaScript has setInterval function, which we can use to achieve this. The first thing we need to display and increment the current game on every state update. For that we can use a variable called today and increment it on every state update.

Next we add some colors to the day of week element, so it is easier to distinguish the days.

And now we can see that the game is updating its current date every two seconds, with different styles for week days and weekends.

Now its time to add initial account balances and tax rates to the game. We will use Math.random() function to generate random numbers for the initial account balances and tax rates.

creditInterestRate and debitInterestRate will be between 5% and 15% and…]]></description><link>https://sergii.dev/articles/the-businessman-basic-interactivity/</link><guid isPermaLink="false">https://sergii.dev/articles/the-businessman-basic-interactivity/</guid><category><![CDATA[Businessman]]></category><pubDate>Tue, 26 Sep 2023 17:02:13 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/a919f0df219d4b39618fbcb5fb541aa6/e26c0/cover.jpg"/><featuredImage>https://sergii.dev/static/a919f0df219d4b39618fbcb5fb541aa6/e26c0/cover.jpg</featuredImage></item><item><title><![CDATA[The Businessman - Basics of Refactoring]]></title><description><![CDATA[Refactoring is the process of improving the quality of existing code without changing its functionality. It can make your code more readable, maintainable, and testable, as well as reduce bugs and errors. In this blog post, we will explore what refactoring is, why it is important, and how to use it in JavaScript. Refactoring can be done at different levels of granularity, from renaming a variable to extracting a function to applying a design pattern. Some common refactoring techniques are:

Extracting variables or constants: This can help you avoid repeating hard-coded values or complex expressions, and give them meaningful names. Extracting functions: This can help you break down a long or complicated function into smaller and simpler ones, each with a single responsibility. Renaming variables, functions, or parameters: This can help you make your code more consistent and descriptive, and avoid confusion or ambiguity. Replacing conditional logic with polymorphism: This can help you…]]></description><link>https://sergii.dev/articles/the-businessman-basics-of-refactoring/</link><guid isPermaLink="false">https://sergii.dev/articles/the-businessman-basics-of-refactoring/</guid><category><![CDATA[Businessman]]></category><pubDate>Mon, 02 Oct 2023 16:49:39 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/961afe6fb4c4233189fd017db7fd3fa8/3f4ea/cover.jpg"/><featuredImage>https://sergii.dev/static/961afe6fb4c4233189fd017db7fd3fa8/3f4ea/cover.jpg</featuredImage></item><item><title><![CDATA[The Businessman - Events Handling]]></title><description><![CDATA[Overview In the previous blog post, we have learned about the basics of refctoring. In this blog post, we will learn about events handling in JavaScript, which is a way of reacting to various actions or changes that happen in a web page. Events can be triggered by user interactions, such as clicking a button, moving the mouse, typing on the keyboard, or submitting a form. Events can also be triggered by the browser, such as loading a page, resizing the window, or closing a tab.

To handle events in JavaScript, we need two things: an event target and an event handler. An event target is an HTML element that can emit or listen to events. For example, a button element can emit a click event when it is clicked by the user. An event handler is a function that contains the code to execute when an event occurs. For example, an event handler can change the color of the button when it is clicked.

Event handling in JavaScript is a powerful feature that allows us to create dynamic and interactive…]]></description><link>https://sergii.dev/articles/the-businessman-events-handling/</link><guid isPermaLink="false">https://sergii.dev/articles/the-businessman-events-handling/</guid><category><![CDATA[Businessman]]></category><pubDate>Sat, 09 Dec 2023 19:33:43 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/d90793385e2195172df1745a97311041/4cb25/cover.jpg"/><featuredImage>https://sergii.dev/static/d90793385e2195172df1745a97311041/4cb25/cover.jpg</featuredImage></item><item><title><![CDATA[The Businessman - Dialogs]]></title><description><![CDATA[After event handling has been implemented and we got ability to open empty dialogs, it's time to add some content to them. We have to implement six dialogs:

Quit Assistant Assets Exchange Market Bank

I decided to go from last to first, because the last one is the easiest to implement. And we can reuse it's code for other dialogs.

Quit

To implement the Quit dialog we need to add only few lines of HTML and CSS, as in prevous article we already implemented the dialog itself.

Only two classes added to the CSS, the good thing is that they are generic and could be reused later in other dialogs too.

To make Quit dialog functional, we need to implement startGame functinality firs, to restart the game, when quit the current. To do it, we need to wrapp our init logic into the function, and call it on the game start and restart.

And add keyboard event handler to the Quit dialog. And start the game.

That's it, we have implemented the Quit dialog.

Assistant

The assistant dialog is very…]]></description><link>https://sergii.dev/articles/the-businessman-dialogs/</link><guid isPermaLink="false">https://sergii.dev/articles/the-businessman-dialogs/</guid><category><![CDATA[Businessman]]></category><pubDate>Sun, 14 Jan 2024 12:09:09 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/2085fdaf8f48d9db16fe824914ee749f/3f2a1/cover.png"/><featuredImage>https://sergii.dev/static/2085fdaf8f48d9db16fe824914ee749f/3f2a1/cover.png</featuredImage></item><item><title><![CDATA[The Businessman - Bank Logic]]></title><description><![CDATA[The bank logic in the game is one of the most complex components, as it is responsible for handling lending and borrowing money, reacting to the player's actions, defining new keyboard handlers, validating inputs, and placing the data back to the game store. It is a crucial part of the game's mechanics and requires careful design and implementation to ensure that it functions correctly. The bank logic is responsible for managing the game's economy, which is a critical aspect of the game's overall experience. It must be designed to be robust and flexible, capable of handling a wide range of scenarios and player actions. This includes managing loans, interest rates, and other financial transactions.

To achieve this, the bank logic must be carefully designed and implemented, with a focus on modularity, scalability, and maintainability. This requires a deep understanding of the game's mechanics and the underlying programming language, as well as a strong grasp of software engineering…]]></description><link>https://sergii.dev/articles/the-businessman-bank-logic/</link><guid isPermaLink="false">https://sergii.dev/articles/the-businessman-bank-logic/</guid><category><![CDATA[Businessman]]></category><pubDate>Sun, 28 Jan 2024 13:43:54 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/e3c79a8de4250e66f5e193ed7f836955/65210/cover.png"/><featuredImage>https://sergii.dev/static/e3c79a8de4250e66f5e193ed7f836955/65210/cover.png</featuredImage></item><item><title><![CDATA[The Businessman - Exchange Logic]]></title><description><![CDATA[After we implemented the bank logic, we can move to the next part of the game, which is the Exchange. The exchange logic will be similar in complexity to the bank logic, but we will be able to reuse some techniques and code from the bank logic. There is no so many changes in compare to the one we did in the bank logic, but as I shown in the previous article, you can look through all the changes just by using GitHub's compare feature.

UI changes

The modifications we need to make are very small and straightforward, and they do not affect the overall structure of our code. We can apply the same approach that we have already implemented for the bank logic, which has proven to be effective and reliable.

Handling exchange buy logic

The logic to buy goods is similar to the one which we used in the bank logic. Based on "o" or "l" key press, we will show the prompt to buy oil or land. And on "Enter" or "Tab" key press, we will process the purchase.

In this section, we will explain how to…]]></description><link>https://sergii.dev/articles/the-businessman-exchange-logic/</link><guid isPermaLink="false">https://sergii.dev/articles/the-businessman-exchange-logic/</guid><category><![CDATA[Businessman]]></category><pubDate>Sat, 10 Feb 2024 14:14:03 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/0941fd355a0080d6a8ae382897008b87/3607e/cover.png"/><featuredImage>https://sergii.dev/static/0941fd355a0080d6a8ae382897008b87/3607e/cover.png</featuredImage></item><item><title><![CDATA[The Businessman - Market Logic]]></title><description><![CDATA[After we implemented the exchange logic, the Market logic becomes so easy, that we just need to copy/paste and rename some variables. UI changes

We just add the input fields and error messge.

Handling market buying logic

The logic to buy goods is similar to the one which we used in the exchange logic. Based on "c" or "h" key press, we will show the prompt to buy new car or house. And on "Enter" or "Tab" key press, we will process the purchase.

Summary

The sources of the changes you can find on GiHub.

In the next article, we will implement the logic for the Assets.]]></description><link>https://sergii.dev/articles/the-businessman-market-logic/</link><guid isPermaLink="false">https://sergii.dev/articles/the-businessman-market-logic/</guid><category><![CDATA[Businessman]]></category><pubDate>Sun, 11 Feb 2024 19:12:51 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/b59119518cef47236ef1eae0476683f1/7e11c/cover.png"/><featuredImage>https://sergii.dev/static/b59119518cef47236ef1eae0476683f1/7e11c/cover.png</featuredImage></item><item><title><![CDATA[The Businessman - Assets Logic]]></title><description><![CDATA[With the exchange logic and the market logic being implemented, we can move to the next part of the game - Assets. Our work will be to implement the logic for selling cars, houses, lands and oils. And it will be so easy to do, as effectively we are going to reverse the exchange logic and sell goods instead of buying them. UI changes

We just add the input fields and error messge, the same as we've done in the market logic.

Handling assets selling logic

The logic to sell goods is similar to the one which we used in the exchange logic. Based on "c" or "h" key press, we will automatically sell the car or house. With "l" and "o" key press, we will sell the land and oil. But this logic will require to enter amount of goods to be sold. For that "Enter" or "Tab" key press will process the selling.

Also we shouldn't forget to call the assignAssetsWindowActions function in the assignActionHandlers function.

There is one small change in the setAssets function. We need to handle properly…]]></description><link>https://sergii.dev/articles/the-businessman-assets-logic/</link><guid isPermaLink="false">https://sergii.dev/articles/the-businessman-assets-logic/</guid><category><![CDATA[Businessman]]></category><pubDate>Sun, 25 Feb 2024 13:21:21 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/9c95bf3ba18b26f2094ddd50706f2ce9/948fb/cover.png"/><featuredImage>https://sergii.dev/static/9c95bf3ba18b26f2094ddd50706f2ce9/948fb/cover.png</featuredImage></item><item><title><![CDATA[The Businessman - Assistant Logic]]></title><description><![CDATA[The assistnat logic is both simple and complex. It is simple because we have a lot of the logic already in place. It is complex because we need to make sure that the assistant is able to handle all the different scenarios that the player can throw at it. The Assistant handles different activities that the player can do:

Buy and sell goods and that has to be tracked. The player has a birthday and it has to be celebrated. Landing and borrowing money, or actually the time when they should be returned by the bank or to the bank should be reminded by the assistant in the month the action happens. Also, the assistant should remind on the amount of oil needed for house heating.

We've already reflected some of that data on the assistant's screen. Now we need to make sure that the assistant can handle the data and the logic behind it.

The Assistant Logic

First off all let's extend the form with landing and borrowing money fields, which should be hidden by default.

Also we need to add the…]]></description><link>https://sergii.dev/articles/the-businessman-assistant-logic/</link><guid isPermaLink="false">https://sergii.dev/articles/the-businessman-assistant-logic/</guid><category><![CDATA[Businessman]]></category><pubDate>Wed, 20 Mar 2024 21:56:16 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/4d702984083eacd3cdd4dd7f485f7ee9/9ccac/cover.png"/><featuredImage>https://sergii.dev/static/4d702984083eacd3cdd4dd7f485f7ee9/9ccac/cover.png</featuredImage></item><item><title><![CDATA[The Businessman - End of the Month Logic]]></title><description><![CDATA[This is the last part of the game logic. When the month ends (or, to simplify the logic of the end of the month detection, we will use the 1st day of the month), the all prices on the exchange and on the market must be updated. The assistant should remind the player about the amount of oil needed for the house heating. All the interests should be paid and new tax and interest rates should be provided. The logic itself is not difficult, but we also need to pause the game when the month ends or when any dialog window opens. That brings some complexity to the logic, as the pause logic will be placed in a lot of functions, which adds a coupling and breaks Single Responsibility Principle. But we will refactor it later and I'll show much more effective methods to handle application maintainability. There were two main changes made in this part of the game logic.

Pay Taxes

The first change is the payTaxes function. It is called when the month ends. The function is responsible for updating…]]></description><link>https://sergii.dev/articles/the-businessman-end-month-logic/</link><guid isPermaLink="false">https://sergii.dev/articles/the-businessman-end-month-logic/</guid><category><![CDATA[Businessman]]></category><pubDate>Mon, 22 Apr 2024 19:22:09 GMT</pubDate><media:thumbnail url="https://sergii.dev/static/ba17be608a798291720ec98e26e8856b/53d3b/cover.jpg"/><featuredImage>https://sergii.dev/static/ba17be608a798291720ec98e26e8856b/53d3b/cover.jpg</featuredImage></item></channel></rss>