{"componentChunkName":"component---src-components-article-tsx-content-file-path-home-runner-work-sergii-dev-sergii-dev-articles-2023-10-02-the-businessman-basics-of-refactoring-mdx","path":"/articles/the-businessman-basics-of-refactoring/","result":{"data":{"site":{"siteMetadata":{"title":"Sergii Mykhailov","author":"Sergii Mykhailov"}},"mdx":{"excerpt":"Refactoring is the process of improving the quality of existing code without changing its functionality. It can make your code moreâ€¦","body":"\nRefactoring is the process of improving the quality of existing code without changing its functionality.\nIt can make your code more readable, maintainable, and testable, as well as reduce bugs and errors.\nIn this blog post, we will explore what refactoring is, why it is important, and how to use it in JavaScript.\n\nRefactoring can be done at different levels of granularity, from renaming a variable to extracting a function\nto applying a design pattern. Some common refactoring techniques are:\n\n- **Extracting variables or constants**: This can help you avoid repeating hard-coded values or complex expressions,\n  and give them meaningful names.\n- **Extracting functions**: This can help you break down a long or complicated function into smaller and simpler ones,\n  each with a single responsibility.\n- **Renaming variables, functions, or parameters**: This can help you make your code more consistent and descriptive,\n  and avoid confusion or ambiguity.\n- **Replacing conditional logic with polymorphism**: This can help you eliminate long or nested if-else statements,\n  and use object-oriented principles to handle different behaviors based on types or states.\n- **Moving functions or variables**: This can help you organize your code better, and group related elements together.\n- **Simplifying boolean expressions**: This can help you make your code more readable and concise, and avoid unnecessary\n  or redundant conditions.\n\nRefactoring in JavaScript can be done manually or with the help of tools. Manual refactoring requires careful\nattention and testing, as you might introduce errors or change the behavior of your code unintentionally.\nTools can automate some of the refactoring tasks, such as renaming or formatting, and alert you of potential issues or conflicts.\nSome popular tools for refactoring JavaScript are:\n\n- **[ESLint](https://eslint.org/)**: This is a linter that can detect and fix common syntax and style errors, as well as\n  enforce best practices and coding standards.\n- **[Prettier](https://prettier.io/)**: This is a formatter that can automatically format your code according to a set of rules,\n  and ensure consistency and readability.\n- **[VS Code](https://code.visualstudio.com/)**: This is an editor that has built-in support for refactoring JavaScript,\n  such as extracting variables or functions, renaming elements, or moving code around.\n\nRefactoring is not a one-time activity, but a continuous practice that should be done regularly and incrementally.\nIt can help you keep your code clean and healthy, and improve your productivity and performance.\nRefactoring in JavaScript can be easier and faster with the use of tools, but it still requires human judgment and testing.\nRemember to always refactor with a purpose, and not just for the sake of it.\n\n## Apply refactoring\n\nNow, when we know what refactoring is about, Let's apply some of techniques to the code from [previous article](/articles/the-businessman-basic-interactivity/).\n\nFirst of all let's extract some functions. We can see a lot of repeating code to get the element and display some data:\n\n```javascript\nconst todayDateElement = document.getElementById(\"today-date\");\nconst todayDayOfWeekElement = document.getElementById(\"today-day-of-week\");\n\ntodayDateElement.innerText = currentDate;\ntodayDayOfWeekElement.innerText = dayOfWeek;\n```\n\nInstead of repeating this code, we can make a function that will do it for us:\n\n```javascript\nconst setElementData = (elementId, data) => {\n  const element = document.getElementById(elementId);\n  element.innerText = data;\n};\n```\n\nnow we can replace all the places where we were repeating the code with the function:\n\n```javascript\nsetInterval(() => {\n  ...\n  setElementData('today-date', currentDate);\n  setElementData('today-day-of-week', dayOfWeek);\n  ...\n}, 2000);\n```\n\nNow it looks much cleaner and more maintainable. But still not perfect, there are still\na lot of this functions comming in blocks, not grouped by functionality. Let's fix this by grouping\nand naming them more appropriately:\n\n```javascript\nconst setTodayView = today => {\n  const currentDate = today.toLocaleDateString(\"en-US\");\n  const dayOfWeek = today.toLocaleDateString(\"en-US\", { weekday: \"long\" });\n  const dayOfWeekNum = today.getDay();\n\n  setElementData(\"today-date\", currentDate);\n  setElementData(\"today-day-of-week\", dayOfWeek);\n\n  updateDayOfWeekColor(dayOfWeekNum);\n};\n```\n\nSimilar way we can group and name the functions that are responsible for displaying account balances, taxes and interest rates:\n\n```javascript\nconst setInterestRates = () => {\n  setElementData(\"credit-interest-rate\", creditInterestRate.toFixed(0));\n  setElementData(\"debit-interest-rate\", debitInterestRate.toFixed(0));\n  setElementData(\"income-tax\", incomeTax.toFixed(0));\n};\n\nconst setAccountsBalance = () => {\n  setElementData(\"account-balance\", accountBalance.toFixed(0));\n  setElementData(\"credit-balance\", creditBalance.toFixed(0));\n  setElementData(\"deposit-balance\", depositBalance.toFixed(0));\n  setElementData(\"net-income\", netIncome.toFixed(0));\n};\n\nconst setTaxes = () => {\n  setElementData(\"house-tax\", houseTax.toFixed(0));\n  setElementData(\"land-tax\", landTax.toFixed(0));\n};\n```\n\nThere is one problem with this approach, the previous function depends on the global variables, and we'd like to avoid that.\nThis is important, because we can decouple the functions from the global state, and make them more reusable.\n\nTo do that we can pass the data as arguments to the functions:\n\n```javascript\nconst setInterestRates = interestRates => {\n  setElementData(\n    \"credit-interest-rate\",\n    interestRates.creditInterestRate.toFixed(0)\n  );\n  setElementData(\n    \"debit-interest-rate\",\n    interestRates.debitInterestRate.toFixed(0)\n  );\n  setElementData(\"income-tax\", interestRates.incomeTax.toFixed(0));\n};\n\nconst setAccountsBalance = accountBalances => {\n  setElementData(\"account-balance\", accountBalances.accountBalance.toFixed(0));\n  setElementData(\"credit-balance\", accountBalances.creditBalance.toFixed(0));\n  setElementData(\"deposit-balance\", accountBalances.depositBalance.toFixed(0));\n  setElementData(\"net-income\", accountBalances.netIncome.toFixed(0));\n};\n\nconst setTaxes = taxes => {\n  setElementData(\"house-tax\", taxes.houseTax.toFixed(0));\n  setElementData(\"land-tax\", taxes.landTax.toFixed(0));\n};\n```\n\nNow we need to refactor our global variables, and put them into structures, in the future we can move them to the separate file, to decouple data,\nbuisinss logic and presentation.\n\n```javascript\nconst interestRates = {\n  debitInterestRate: Math.random() * 10 + 5,\n  incomeTax: Math.random() * 9 + 1,\n  creditInterestRate: Math.random() * 10 + 5,\n};\n\nconst accountBalances = {\n  accountBalance: Math.random() * 10000 + 1000,\n  creditBalance: 0,\n  depositBalance: 0,\n  netIncome: 0,\n};\n\nconst taxes = {\n  houseTax: Math.random() * 19 + 1,\n  landTax: Math.random() * 19 + 1,\n};\n```\n\nLet's also extract our data coloring logic to the separate function:\n\n```javascript\nconst updateDayOfWeekColor = dayOfWeekNum => {\n  const todayDayOfWeekElement = document.getElementById(\"today-day-of-week\");\n  if (dayOfWeekNum === 0) {\n    todayDayOfWeekElement.classList.add(\"sunday\");\n  } else if (dayOfWeekNum === 6) {\n    todayDayOfWeekElement.classList.add(\"saturday\");\n  } else {\n    todayDayOfWeekElement.classList.remove(\"sunday\");\n    todayDayOfWeekElement.classList.remove(\"saturday\");\n  }\n};\n```\n\nAnd now our main game loop, looks nice, simple and more maintainable:\n\n```javascript\nsetInterval(() => {\n  setTodayView(today);\n  setInterestRates(interestRates);\n  setAccountsBalance(accountBalances);\n  setTaxes(taxes);\n\n  today.setDate(today.getDate() + 1);\n}, 2000);\n```\n\n## Summary\n\nThis is just a small example of refactoring, but it shows how we can improve our code, and make it more maintainable.\nThese techniques are usefull as it allows developers to use Single Responisbility Principle (SRP), which I'll describe\nin one of the future articles.\n\nAs usual you can find refactored version of the code, on the [GitHub](https://github.com/smykhailov/the-businessman/releases/tag/v0.4).\nIn the next article we will continue to add more interactivity to our game.\n","frontmatter":{"title":"The Businessman - Basics of Refactoring","date":"2023-10-02T16:49:39.000Z","tags":["businessman","project","javascript","refactoring"],"keywords":["refactoring","javascript","the game"],"featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#081838","images":{"fallback":{"src":"/static/961afe6fb4c4233189fd017db7fd3fa8/3f4ea/cover.jpg","srcSet":"/static/961afe6fb4c4233189fd017db7fd3fa8/f1a3a/cover.jpg 150w,\n/static/961afe6fb4c4233189fd017db7fd3fa8/81bf6/cover.jpg 300w,\n/static/961afe6fb4c4233189fd017db7fd3fa8/3f4ea/cover.jpg 600w","sizes":"(min-width: 600px) 600px, 100vw"},"sources":[{"srcSet":"/static/961afe6fb4c4233189fd017db7fd3fa8/70dfd/cover.webp 150w,\n/static/961afe6fb4c4233189fd017db7fd3fa8/9b21f/cover.webp 300w,\n/static/961afe6fb4c4233189fd017db7fd3fa8/9ff6b/cover.webp 600w","type":"image/webp","sizes":"(min-width: 600px) 600px, 100vw"}]},"width":600,"height":400}}}},"internal":{"contentFilePath":"/home/runner/work/sergii-dev/sergii-dev/articles/2023-10-02-the-businessman-basics-of-refactoring.mdx"},"fields":{"slug":"/articles/the-businessman-basics-of-refactoring/","readingTime":{"text":"5 min read","minutes":5.005,"time":300300}}}},"pageContext":{"id":"05250e59-d700-56ab-9654-8336e10671de","frontmatter":{"title":"The Businessman - Basics of Refactoring","date":"2023-10-02T16:49:39.000Z","published":true,"featuredImage":"./images/2023-10-02-the-businessman-basics-of-refactoring/cover.jpg","categories":["Businessman"],"tags":["businessman","project","javascript","refactoring"],"keywords":["refactoring","javascript","the game"]}}},"staticQueryHashes":["1739528850","3446427935"],"slicesMap":{}}