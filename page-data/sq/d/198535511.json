{"data":{"allGithubData":{"edges":[{"node":{"data":{"repositoryOwner":{"repositories":{"edges":[{"node":{"name":"sergii-dev","description":"The Sergii's personal site","createdAt":"2020-12-28T19:08:37Z","object":{"text":"# Sergii Mykhailov\n\n![Gatsby Publish](https://github.com/smykhailov/sergii-dev/workflows/Gatsby%20Publish/badge.svg)\n\nThis is [source code](https://github.com/smykhailov/sergii-dev/) for [Sergii's](https://sergii.dev/) blog.\n"}}},{"node":{"name":"the-businessman","description":"The replica of the Комерсантъ game, implemented with vanilla web technologies: JavaScript, HTML and CSS","createdAt":"2023-07-17T16:52:53Z","object":{"text":"# The Businessman\n\nThe replica of the Комерсантъ game, implemented with vanilla web technologies: JavaScript, HTML and CSS.\n"}}},{"node":{"name":"graphql-playground","description":"The playground for GraphQL schema on the client.","createdAt":"2020-11-25T15:23:29Z","object":{"text":"# Playground for GraphQL\n\nExperiment with different approaches of GraphQL schema on the client.\n\n## Build and test\n\n* run `yarn install` - to install dependencies\n* run `yarn start` - to start [development server](http://localhost:3000/)\n* run `yarn build` - to create production build\n* run `yarn test` - to run all unit tests\n"}}},{"node":{"name":"interview-accessibility","description":"This is template for the interview. Un optimal set of classes as a starting point for the real world paroblem to solve during interview.","createdAt":"2024-03-04T17:59:59Z","object":{"text":"# Interview Accessibility\n\nThis is template for the interview. An un optimal set of classes as a starting point for \nthe real world problem to solve during interview.\n"}}},{"node":{"name":"react-patterns","description":"The project explains how to fix potential issues with React","createdAt":"2019-12-01T19:48:14Z","object":{"text":"# Overview\n\nThe project is created to experiment with different approaches to use React and create a list of do's, dont's, problematic approaches and best practice in terms of performance, readability, extensibility and maintainability.\n"}}},{"node":{"name":"businessman","description":"The replica of the Коммерсантъ game, implemented in Delphi.","createdAt":"2023-07-10T15:31:17Z","object":{"text":"# The Businessman Game\n\nThe replica of the Коммерсантъ game, implemented in Delphi. The original version of this game has been written by Ukrainian programmer [Volodymyr Kharchenko](https://uk.wikipedia.org/wiki/Харченко_Володимир_Анатолійович) and distributed as a freeware software.\n\n## The original Коммерсантъ\n\n\"Коммерсантъ\" is an economic strategy game in which events occur in real-time but pause to wait for the user's reaction. The player takes on the role of a merchant whose goal is to increase wealth through commercial operations such as buying and selling, depositing and borrowing funds from the bank, purchasing from dubious individuals at a reduced price, concluding various deals and so on. The game begins on January 1, 2000 when the player has a car, a house, a small amount of land and oil, as well as some money in an account (in a currency called \"grobly\").\n\nIf the player does nothing during the game, time passes (one day in several seconds) and various events may occur that require the player's reaction. During the waiting period, the player can find out from the secretary the state of affairs, go to the bank, market, or visit the stock exchange. In the bank, you can both take out a loan and lend at interest. In a merchant's economy, there may be two types of goods - oil and land. Each of them can be bought or sold on the stock exchange. At the same time, oil is required for heating a house, and accordingly, some of its reserves are needed; an unheated house creates the probability that a merchant will get sick and end up in a hospital. Land is taxed and therefore at the end of the month for its ownership, a bill is issued to the player for payment. Each of the goods can change its price once a month on the stock exchange, and thus a merchant can choose moments when they are cheap to buy and expensive to sell. At the same time, random events may occur (for example, bankruptcy of oil companies), which can change the price of goods many times over. At the same time, if a player has goods in stock, then they are subject to the risk of random events (for example, a fire at an oil storage facility can destroy property). Also, land and oil can only be purchased until there is at least one unit of purchased goods in stock. In case of bankruptcy, goods are sold for a third of their price until they run out or until the balance becomes positive. Also, nothing can be bought if there will be less than one grobly on balance after that.\n\nThe gameplay is divided into periods of one year, at the end of each of which the player's result is recorded in the table of the best merchants for the corresponding year. In the case of a multiplayer game mode, which is implemented as hotseat, players change at the end of each year. The game is divided into months, at the end of each of which a balance is drawn up for all operations during the past month, and if it is positive, the tax inspection withdraws the amount of tax according to the current percentage. Interest rates change over time according to random events (orders from the district executive committee, decrees of the president, and so on).\n\nRandom events can be of several types. These are one-time events that change some indicators (OMON takes the player's car, the bank goes bankrupt, etc.). A chain of events - for example, the character's wife is kidnapped by bandits and a ransom is demanded, and an investigation can be started that lasts several months and consists of a series of one-time events. Visiting a restaurant not only gives a chance to conclude profitable deals but also has a chance to get poisoned, which leads to staying in the hospital without the possibility of doing anything and paying for treatment upon completion; and if the player does not sell stolen oil quickly, then the police may go after them. The third type is built-in mini-games: a racetrack and a casino. In the first one, the player can bet on horses and watch the competition. In the second one, the player is given the opportunity to play roulette or one-armed bandit. In any case, if bankruptcy occurs and the balance remains negative, this is a loss.\n"}}},{"node":{"name":"teams-api","description":"Demonstration how to use Microsoft Teams GraphAPI","createdAt":"2020-07-25T08:37:43Z","object":{"text":"# MS Teams Graph API Example\n\nThe intent of this project is to show an example of [MS Teams Graph API](https://docs.microsoft.com/en-us/graph/api/resources/teams-api-overview?view=graph-rest-1.0) usage. This is leveraged by the using [Microsoft Graph JavaScript Client Library](https://github.com/microsoftgraph/msgraph-sdk-javascript) to access API and [Fluent UI React](https://fluentsite.z22.web.core.windows.net/) for UI.\n\n"}}},{"node":{"name":"react-templates","description":"Templates for React Applications","createdAt":"2020-08-28T16:24:48Z","object":{"text":"# React Templates for CRA\n\nTemplates for React Applications\n"}}},{"node":{"name":"iframe","description":"Experiments with iframes","createdAt":"2019-10-15T15:28:38Z","object":{"text":"# IFrame communication\n\n## Workflow\n\nStart all three apps:\n\n```sh\nyarn start\n```\n\n* host on [http://localhost:3000/](http://localhost:3000/)\n* child on [http://localhost:3001/](http://localhost:3001/)\n* third party on [http://localhost:3002/](http://localhost:3002/)\n\n## Architecture\n\n* Application Host creates Child Host iframe.\n* Child Host iframe creates Child Window (which becomes a host for 3rd party apps).\n  * Child Window and Child Host shares the same JavaScript context (no postMessaging needed, the Child Window is scriptable and all its content is available in Child Host).\n  * Child Window **just** renders content and uses Child Host JavaScript context to manipulate document, events, etc.\n  * if access directly to the `window` object from Child Window in fact you get Child Host `window` object instead.\n  * to access Child Window `window` reference it must be passed from Child Host to Child Window as a parameter.\n* Child Window hosts Third Party App iframe.\n\n### Example\n\n```tsx\n\n// ChildWindow.tsx\nconst ChildWindow = (props: { target: Window }) => (  // target is the actual Child Window window, passed as a parameter\n  <div>\n    <h1>Hi, I'm child window</h1>\n    <p>{props.target.someProp}</p>  {/* access to this window prop */}\n    <p>{window.someProp}</p>  {/* access to the host window prop */}\n  </div>\n)\n\n...\n\n// Host.tsx\n...\n// on openWindowButtonClick\n\nopenWindowButtonClick = () => {\n  const childWindow = window.open();\n  // childWindow.document.body uses just for rendering DOM, but not to access JS context\n  // which remains in the window where this code gets executed.\n  ReactDOM.render(<ChildWindow target={childWindow} />, childWindow.document.body);\n}\n\n...\n\n```\n"}}}]}}}}}]}}}