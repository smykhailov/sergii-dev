{"version":3,"file":"component---src-components-category-tsx-800eafc7031009e22195.js","mappings":"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","sources":["webpack://sergii-dev/./src/components/category.tsx","webpack://sergii-dev/./src/components/left-pane/categories-list.tsx"],"sourcesContent":["import React, { FC, useState } from \"react\";\n\nimport { graphql, HeadFC } from \"gatsby\";\n\nimport { FixedSizeList as List, ListChildComponentProps } from \"react-window\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\n\nimport CategoriesList from \"./left-pane/categories-list\";\nimport ContentContainer from \"./content\";\nimport ArticleListItem from \"./article-list-item\";\nimport SEO from \"./seo\";\n\nconst Row = ({\n  data,\n  index,\n  style,\n}: ListChildComponentProps<{ location: Location; edges: any }>) => {\n  const {\n    id,\n    fields: { slug, readingTime },\n    frontmatter: { title, date, tags },\n  } = data.edges[index].node;\n\n  return (\n    <ArticleListItem\n      id={id}\n      key={id}\n      slug={slug!}\n      title={title!}\n      date={date!}\n      timeToRead={readingTime?.text!}\n      tags={tags}\n      style={style}\n    />\n  );\n};\n\nconst Category: FC<{\n  data: GatsbyTypes.CategoryArticlesByCategoryQuery;\n  pageContext: {\n    category: string;\n  };\n  location: Location;\n}> = props => {\n  const { edges } = props.data.allMdx;\n  const [shouldDisplayShadow, setShouldDisplayShadow] =\n    useState<boolean>(false);\n\n  return (\n    <ContentContainer\n      title={props.pageContext.category}\n      displayShadow={shouldDisplayShadow}\n    >\n      <AutoSizer>\n        {({ height, width }) => (\n          <List\n            height={height}\n            itemCount={edges.length}\n            itemData={{ location: props.location, edges }}\n            itemSize={154}\n            width={width}\n            onScroll={e => setShouldDisplayShadow(e.scrollOffset > 0)}\n          >\n            {Row}\n          </List>\n        )}\n      </AutoSizer>\n    </ContentContainer>\n  );\n};\n\nexport const query = graphql`\n  query CategoryArticlesByCategory($category: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    allMdx(\n      sort: { frontmatter: { date: DESC } }\n      filter: {\n        frontmatter: { categories: { eq: $category }, published: { eq: true } }\n      }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n            readingTime {\n              text\n              minutes\n              time\n            }\n          }\n          frontmatter {\n            title\n            date\n            categories\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n\n(Category as any).Aside = CategoriesList;\n\nexport default Category;\n\nexport const Head: HeadFC<\n  GatsbyTypes.CategoryArticlesByCategoryQuery,\n  { category: string }\n> = props => {\n  const siteMetadata = props.data.site?.siteMetadata!;\n  return (\n    <SEO\n      title={`Category | ${props.pageContext.category}`}\n      author={siteMetadata.author}\n      keywords={props.pageContext.category}\n      description={props.pageContext.category}\n    />\n  );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { graphql, Link, useStaticQuery } from \"gatsby\";\nimport slugify from \"slugify\";\nimport styled from \"@emotion/styled\";\n\nimport LeftPaneContainer from \"./left-pane-container\";\nimport { isRouteActive } from \"@core/routing\";\n\nconst CategoriesList: FC<{ location: Location }> = props => {\n  const { distinct: categories, group } = useCategoriesListQuery();\n  const [offsetTop, setOffsetTop] = useState(0);\n  const activeLi = React.useRef<HTMLLIElement>(null);\n\n  useEffect(() => {\n    setOffsetTop(activeLi?.current?.offsetTop || 0);\n  }, [activeLi]);\n\n  return (\n    <LeftPaneContainer title=\"Categories\" offsetTop={offsetTop}>\n      <Categories>\n        {categories.map((category, idx) => {\n          const slug = `/categories/${slugify(category).toLocaleLowerCase()}`;\n          const articlesCount = group[idx]?.totalCount || 0;\n          let amountOfArticles = \"There are no articles in this category yet\";\n\n          if (articlesCount > 0) {\n            if (articlesCount === 1) {\n              amountOfArticles = \"1 article\";\n            } else {\n              amountOfArticles = `${articlesCount} articles`;\n            }\n          }\n\n          const isActive = isRouteActive(slug, props.location);\n\n          return (\n            <li key={slug} ref={isActive ? activeLi : null}>\n              <Link\n                to={slug}\n                className={isActive ? \"active\" : undefined}\n                title={category}\n              >\n                <p>\n                  <strong>{category}</strong>\n                </p>\n                <p>{amountOfArticles}</p>\n              </Link>\n            </li>\n          );\n        })}\n      </Categories>\n    </LeftPaneContainer>\n  );\n};\n\nconst useCategoriesListQuery = () => {\n  const { allMdx } = useStaticQuery<GatsbyTypes.CategoriesListQuery>(graphql`\n    query CategoriesList {\n      allMdx(\n        sort: { frontmatter: { categories: ASC } }\n        filter: { frontmatter: { published: { eq: true } } }\n      ) {\n        distinct(field: { frontmatter: { categories: SELECT } })\n        group(field: { frontmatter: { categories: SELECT } }) {\n          totalCount\n        }\n      }\n    }\n  `);\n\n  return allMdx;\n};\n\nconst Categories = styled.ul(props => ({\n  \"& > li > a\": {\n    display: \"flex\",\n    flexDirection: \"column\",\n    color: props.theme.colors.leftPane.textColor,\n    paddingTop: 6,\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    border: \"solid 1px transparent\",\n  },\n  \"& > li > a:hover\": {\n    backgroundColor: props.theme.colors.leftPane.backgroundColorHover,\n    border: props.theme.colors.borderHover,\n    color: props.theme.colors.leftPane.textColorHover,\n    textDecoration: \"none\",\n    cursor: \"pointer\",\n  },\n\n  \"& > li > a.active\": {\n    backgroundColor: props.theme.colors.leftPane.backgroundColorActive,\n    border: props.theme.colors.borderActive,\n    color: props.theme.colors.leftPane.textColorActive,\n  },\n\n  \"& > li > a strong\": {\n    fontWeight: \"bold\",\n  },\n\n  \"& > li > a span\": {\n    marginLeft: 16,\n    fontSize: 11,\n    opacity: 0.85,\n  },\n\n  \"& > li > a > p\": {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n}));\n\nexport default CategoriesList;\n"],"names":["Row","_ref","data","index","style","id","fields","slug","readingTime","frontmatter","title","date","tags","edges","node","___EmotionJSX","ArticleListItem","key","timeToRead","text","Category","props","allMdx","shouldDisplayShadow","setShouldDisplayShadow","useState","ContentContainer","pageContext","category","displayShadow","AutoSizer","_ref2","height","width","List","itemCount","length","itemData","location","itemSize","onScroll","e","scrollOffset","Aside","CategoriesList","Head","_props$data$site","siteMetadata","site","SEO","author","keywords","description","useCategoriesListQuery","useStaticQuery","Categories","_styled","target","display","flexDirection","color","theme","colors","leftPane","textColor","paddingTop","paddingBottom","paddingLeft","paddingRight","border","backgroundColor","backgroundColorHover","borderHover","textColorHover","textDecoration","cursor","backgroundColorActive","borderActive","textColorActive","fontWeight","marginLeft","fontSize","opacity","justifyContent","distinct","categories","group","offsetTop","setOffsetTop","activeLi","React","useEffect","_activeLi$current","current","LeftPaneContainer","map","idx","_group$idx","slugify","toLocaleLowerCase","articlesCount","totalCount","amountOfArticles","isActive","isRouteActive","ref","Link","to","className","undefined"],"sourceRoot":""}